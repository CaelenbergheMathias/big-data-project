<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10500.17.1226.1925                               -->
<workbook original-version='10.5' source-build='10.5.0 (10500.17.1226.1925)' source-platform='win' version='10.5' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='finalCleaning_1 - kopie' inline='true' name='federated.0zlq722065vciw16e7xu318hrqrk' version='10.5'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='finalCleaning_1 - kopie' name='textscan.1mt1n090bn2gur1e71x320ffxwpp'>
            <connection class='textscan' directory='C:/Users/Mathias/AnacondaProjects/big-data-project' filename='finalCleaning_1 - kopie.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.1mt1n090bn2gur1e71x320ffxwpp' name='finalCleaning_1 - kopie.csv' table='[finalCleaning_1 - kopie#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='nl_BE'>
            <column datatype='string' name=',date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_' ordinal='0' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[finalCleaning_1 - kopie.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;nl_NL&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;â‚¬&quot;</attribute>
              <attribute datatype='string' name='debit-close-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='debit-open-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='decimal-char'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;nl_BE&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='thousands-char'>&quot;.&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_</remote-name>
            <remote-type>129</remote-type>
            <local-name>[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]</local-name>
            <parent-name>[finalCleaning_1 - kopie.csv]</parent-name>
            <remote-alias>,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LNL_RNL' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Arrival_state' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 10]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='10' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 10 ) )' />
      </column>
      <column aggregation='Avg' caption='arrival_lat' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 11]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative' user:SplitFieldIndex='11' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -8 ) ))' />
      </column>
      <column aggregation='Avg' caption='arrival_lon' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 12]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative' user:SplitFieldIndex='12' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -7 ) ))' />
      </column>
      <column caption='sched_dep' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 13]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='13' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -6 ) )' />
      </column>
      <column caption='actual_dep' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='14' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -5 ) )' />
      </column>
      <column caption='dep_delay' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15]' role='dimension' semantic-role='' type='ordinal' user:SplitFieldIndex='15' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -4 ) ))' />
      </column>
      <column caption='arr_sched' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 16]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='16' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -3 ) )' />
      </column>
      <column caption='arr_actual' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 17]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='17' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -2 ) )' />
      </column>
      <column caption='arrival_delay' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 18]' role='dimension' semantic-role='' type='ordinal' user:SplitFieldIndex='18' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -1 ) ))' />
      </column>
      <column caption='ID' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 1 ) )' />
      </column>
      <column caption='Date' datatype='date' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2]' role='dimension' semantic-role='' type='ordinal' user:SplitFieldIndex='2' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='DATE(DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 2 ) ) )) ' />
      </column>
      <column caption='Airline' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='3' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 3 ) )' />
      </column>
      <column caption='Airline_code' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 4]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='4' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 4 ) )' />
      </column>
      <column caption='Airport_departure' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5]' role='dimension' semantic-role='[Airport].[Name]' type='nominal' user:SplitFieldIndex='5' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 5 ) )' />
      </column>
      <column caption='DepartureState' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='6' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 6 ) )' />
      </column>
      <column aggregation='Avg' caption='Dep_lat' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 7]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative' user:SplitFieldIndex='7' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 7 ) ))' />
      </column>
      <column aggregation='Avg' caption='Dep_lon' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 8]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative' user:SplitFieldIndex='8' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 8 ) ))' />
      </column>
      <column caption='Airport_arrival' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 9]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='9' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 9 ) )' />
      </column>
      <column datatype='string' hidden='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='same state' datatype='boolean' name='[Calculation_511158622590758914]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 10]==[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6]' />
      </column>
      <column caption='same location' datatype='boolean' name='[Calculation_511158622593343493]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='([,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 7]==[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 7]AND [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 8]==[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 8])' />
      </column>
      <column caption='Fast Flyers' datatype='boolean' name='[Calculation_511158622599618566]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='([,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 18]&lt;=0 AND [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15]&gt;15)' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3:nk]' pivot='key' type='nominal' />
      <layout dim-ordering='alphabetic' dim-percentage='0.677458' measure-ordering='alphabetic' measure-percentage='0.322542' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;F9&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;EV&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;VX&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;YV&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;MQ&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;WN&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;UA&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;HA&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;AA&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;US&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;FL&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;OO&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;CO&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;B6&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;AS&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;DL&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;XE&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
        <semantic-value key='[State].[Name]' value='%null%' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Aantal externe vluchten'>
      <table>
        <view>
          <datasources>
            <datasource caption='finalCleaning_1 - kopie' name='federated.0zlq722065vciw16e7xu318hrqrk' />
          </datasources>
          <datasource-dependencies datasource='federated.0zlq722065vciw16e7xu318hrqrk'>
            <column caption='Arrival_state' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 10]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='10' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 10 ) )' />
            </column>
            <column caption='ID' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 1 ) )' />
            </column>
            <column caption='DepartureState' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='6' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 6 ) )' />
            </column>
            <column datatype='string' hidden='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='same state' datatype='boolean' name='[Calculation_511158622590758914]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 10]==[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6]' />
            </column>
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' derivation='Count' name='[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_511158622590758914]' derivation='None' name='[none:Calculation_511158622590758914:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <sort class='computed' column='[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6:nk]' direction='DESC' using='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' />
          <filter class='categorical' column='[federated.0zlq722065vciw16e7xu318hrqrk].[none:Calculation_511158622590758914:nk]'>
            <groupfilter function='member' level='[none:Calculation_511158622590758914:nk]' member='false' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0zlq722065vciw16e7xu318hrqrk].[none:Calculation_511158622590758914:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6:nk]</rows>
        <cols>[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Average Delay per Airline'>
      <table>
        <view>
          <datasources>
            <datasource caption='finalCleaning_1 - kopie' name='federated.0zlq722065vciw16e7xu318hrqrk' />
          </datasources>
          <datasource-dependencies datasource='federated.0zlq722065vciw16e7xu318hrqrk'>
            <column caption='dep_delay' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15]' role='dimension' semantic-role='' type='ordinal' user:SplitFieldIndex='15' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -4 ) ))' />
            </column>
            <column caption='Airline' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='3' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 3 ) )' />
            </column>
            <column datatype='string' hidden='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15]' derivation='Avg' name='[avg:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <sort class='computed' column='[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3:nk]' direction='DESC' using='[federated.0zlq722065vciw16e7xu318hrqrk].[avg:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15:qk]' />
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0zlq722065vciw16e7xu318hrqrk].[avg:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0zlq722065vciw16e7xu318hrqrk].[avg:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15:qk]</rows>
        <cols>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Average Delay per Airport'>
      <table>
        <view>
          <datasources>
            <datasource caption='finalCleaning_1 - kopie' name='federated.0zlq722065vciw16e7xu318hrqrk' />
          </datasources>
          <datasource-dependencies datasource='federated.0zlq722065vciw16e7xu318hrqrk'>
            <column caption='dep_delay' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15]' role='dimension' semantic-role='' type='ordinal' user:SplitFieldIndex='15' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -4 ) ))' />
            </column>
            <column caption='Airport_departure' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5]' role='dimension' semantic-role='[Airport].[Name]' type='nominal' user:SplitFieldIndex='5' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 5 ) )' />
            </column>
            <column datatype='string' hidden='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15]' derivation='Avg' name='[avg:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <sort class='computed' column='[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:nk]' direction='DESC' using='[federated.0zlq722065vciw16e7xu318hrqrk].[avg:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15:qk]' />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0zlq722065vciw16e7xu318hrqrk].[avg:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15:qk]</rows>
        <cols>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 13'>
      <table>
        <view>
          <datasources>
            <datasource caption='finalCleaning_1 - kopie' name='federated.0zlq722065vciw16e7xu318hrqrk' />
          </datasources>
          <datasource-dependencies datasource='federated.0zlq722065vciw16e7xu318hrqrk'>
            <column caption='ID' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 1 ) )' />
            </column>
            <column caption='Airline' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='3' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 3 ) )' />
            </column>
            <column datatype='string' hidden='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' derivation='Count' name='[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <sort class='computed' column='[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3:nk]' direction='DESC' using='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' />
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' />
              <text column='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3:nk]</rows>
        <cols />
      </table>
    </worksheet>
    <worksheet name='Sheet 3 (2)'>
      <table>
        <view>
          <datasources>
            <datasource caption='finalCleaning_1 - kopie' name='federated.0zlq722065vciw16e7xu318hrqrk' />
          </datasources>
          <datasource-dependencies datasource='federated.0zlq722065vciw16e7xu318hrqrk'>
            <column caption='ID' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 1 ) )' />
            </column>
            <column caption='Date' datatype='date' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2]' role='dimension' semantic-role='' type='ordinal' user:SplitFieldIndex='2' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='DATE(DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 2 ) ) )) ' />
            </column>
            <column datatype='string' hidden='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' derivation='Count' name='[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2]' derivation='Month-Trunc' name='[tmn:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2]' derivation='Year' name='[yr:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0zlq722065vciw16e7xu318hrqrk].[yr:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]</rows>
        <cols>[federated.0zlq722065vciw16e7xu318hrqrk].[tmn:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Vluchten per airline'>
      <table>
        <view>
          <datasources>
            <datasource caption='finalCleaning_1 - kopie' name='federated.0zlq722065vciw16e7xu318hrqrk' />
          </datasources>
          <datasource-dependencies datasource='federated.0zlq722065vciw16e7xu318hrqrk'>
            <column caption='ID' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 1 ) )' />
            </column>
            <column caption='Airline' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='3' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 3 ) )' />
            </column>
            <column caption='Airline_code' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 4]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='4' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 4 ) )' />
            </column>
            <column datatype='string' hidden='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' derivation='Count' name='[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3:nk]' pivot='key' type='nominal' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 4]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 4:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <sort class='computed' column='[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 4:nk]' direction='DESC' using='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]</rows>
        <cols>([federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 4:nk] / [federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3:nk])</cols>
      </table>
    </worksheet>
    <worksheet name='aantal arrival vluchten per state'>
      <table>
        <view>
          <datasources>
            <datasource caption='finalCleaning_1 - kopie' name='federated.0zlq722065vciw16e7xu318hrqrk' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0zlq722065vciw16e7xu318hrqrk'>
            <column caption='Arrival_state' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 10]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='10' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 10 ) )' />
            </column>
            <column caption='ID' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 1 ) )' />
            </column>
            <column datatype='string' hidden='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' derivation='Count' name='[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 10]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 10:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' palette='red_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' />
              <lod column='[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 10:nk]' />
              <geometry column='[federated.0zlq722065vciw16e7xu318hrqrk].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0zlq722065vciw16e7xu318hrqrk].[Latitude (generated)]</rows>
        <cols>[federated.0zlq722065vciw16e7xu318hrqrk].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='aantal interne vluchten'>
      <table>
        <view>
          <datasources>
            <datasource caption='finalCleaning_1 - kopie' name='federated.0zlq722065vciw16e7xu318hrqrk' />
          </datasources>
          <datasource-dependencies datasource='federated.0zlq722065vciw16e7xu318hrqrk'>
            <column caption='Arrival_state' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 10]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='10' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 10 ) )' />
            </column>
            <column caption='ID' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 1 ) )' />
            </column>
            <column caption='DepartureState' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='6' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 6 ) )' />
            </column>
            <column datatype='string' hidden='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column caption='same state' datatype='boolean' name='[Calculation_511158622590758914]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 10]==[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6]' />
            </column>
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' derivation='Count' name='[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_511158622590758914]' derivation='None' name='[none:Calculation_511158622590758914:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <sort class='computed' column='[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6:nk]' direction='DESC' using='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' />
          <filter class='categorical' column='[federated.0zlq722065vciw16e7xu318hrqrk].[none:Calculation_511158622590758914:nk]'>
            <groupfilter function='member' level='[none:Calculation_511158622590758914:nk]' member='true' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.0zlq722065vciw16e7xu318hrqrk].[none:Calculation_511158622590758914:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]</rows>
        <cols>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='aantal vluchten departure per state'>
      <table>
        <view>
          <datasources>
            <datasource caption='finalCleaning_1 - kopie' name='federated.0zlq722065vciw16e7xu318hrqrk' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0zlq722065vciw16e7xu318hrqrk'>
            <column caption='ID' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 1 ) )' />
            </column>
            <column caption='DepartureState' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='6' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 6 ) )' />
            </column>
            <column datatype='string' hidden='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' derivation='Count' name='[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' palette='red_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6:nk]' />
              <color column='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' />
              <geometry column='[federated.0zlq722065vciw16e7xu318hrqrk].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0zlq722065vciw16e7xu318hrqrk].[Latitude (generated)]</rows>
        <cols>[federated.0zlq722065vciw16e7xu318hrqrk].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='arrivals per luchthaven'>
      <table>
        <view>
          <datasources>
            <datasource caption='finalCleaning_1 - kopie' name='federated.0zlq722065vciw16e7xu318hrqrk' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0zlq722065vciw16e7xu318hrqrk'>
            <column aggregation='Avg' caption='arrival_lat' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 11]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative' user:SplitFieldIndex='11' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -8 ) ))' />
            </column>
            <column aggregation='Avg' caption='arrival_lon' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 12]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative' user:SplitFieldIndex='12' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -7 ) ))' />
            </column>
            <column caption='ID' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 1 ) )' />
            </column>
            <column datatype='string' hidden='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' derivation='Count' name='[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 11]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 11:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 12]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 12:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 12:qk]' field-type='quantitative' max='-1468836.0199637916' min='-14819021.632139536' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 11:qk]' field-type='quantitative' max='8721696.2712309696' min='698865.78241887037' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' palette='red_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' />
              <size column='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 11:qk]</rows>
        <cols>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 12:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='average delay per maand'>
      <table>
        <view>
          <datasources>
            <datasource caption='finalCleaning_1 - kopie' name='federated.0zlq722065vciw16e7xu318hrqrk' />
          </datasources>
          <datasource-dependencies datasource='federated.0zlq722065vciw16e7xu318hrqrk'>
            <column caption='dep_delay' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15]' role='dimension' semantic-role='' type='ordinal' user:SplitFieldIndex='15' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -4 ) ))' />
            </column>
            <column caption='Date' datatype='date' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2]' role='dimension' semantic-role='' type='ordinal' user:SplitFieldIndex='2' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='DATE(DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 2 ) ) )) ' />
            </column>
            <column datatype='string' hidden='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15]' derivation='Avg' name='[avg:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2]' derivation='Month' name='[mn:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0zlq722065vciw16e7xu318hrqrk].[avg:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15:qk]</rows>
        <cols>[federated.0zlq722065vciw16e7xu318hrqrk].[mn:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='departures per luchthaven'>
      <table>
        <view>
          <datasources>
            <datasource caption='finalCleaning_1 - kopie' name='federated.0zlq722065vciw16e7xu318hrqrk' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0zlq722065vciw16e7xu318hrqrk'>
            <column caption='ID' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 1 ) )' />
            </column>
            <column aggregation='Avg' caption='Dep_lat' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 7]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative' user:SplitFieldIndex='7' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 7 ) ))' />
            </column>
            <column aggregation='Avg' caption='Dep_lon' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 8]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative' user:SplitFieldIndex='8' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 8 ) ))' />
            </column>
            <column datatype='string' hidden='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' derivation='Count' name='[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 7]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 7:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 8]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 8:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' palette='red_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' />
              <size column='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 7:qk]</rows>
        <cols>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 8:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='vluchten per maand'>
      <layout-options>
        <caption>
          <formatted-text>
            <run>Count of ID for each Date Month.  Color shows details about Date Year.&#10;Oktober 2012 vluchten are missing</run>
          </formatted-text>
        </caption>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='finalCleaning_1 - kopie' name='federated.0zlq722065vciw16e7xu318hrqrk' />
          </datasources>
          <datasource-dependencies datasource='federated.0zlq722065vciw16e7xu318hrqrk'>
            <column caption='ID' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 1 ) )' />
            </column>
            <column caption='Date' datatype='date' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2]' role='dimension' semantic-role='' type='ordinal' user:SplitFieldIndex='2' user:SplitFieldOrigin='[federated.0zlq722065vciw16e7xu318hrqrk].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='DATE(DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 2 ) ) )) ' />
            </column>
            <column datatype='string' hidden='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' derivation='Count' name='[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2]' derivation='Month' name='[mn:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2:ok]' pivot='key' type='ordinal' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2]' derivation='Year' name='[yr:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0zlq722065vciw16e7xu318hrqrk].[yr:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2:ok]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]</rows>
        <cols>[federated.0zlq722065vciw16e7xu318hrqrk].[mn:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2:ok]</cols>
      </table>
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' name='Vluchten per airline'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 4:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='arrivals per luchthaven'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' type='size' />
            <card pane-specification-id='0' param='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 11:qk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 12:qk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='departures per luchthaven'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' type='size' />
            <card pane-specification-id='0' param='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 11:qk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 12:qk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 7:qk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 8:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='vluchten per maand'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0zlq722065vciw16e7xu318hrqrk].[yr:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2:ok]' type='color' />
          </strip>
        </edge>
        <edge name='bottom'>
          <strip size='96'>
            <card type='caption' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[yr:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Sheet 3 (2)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0zlq722065vciw16e7xu318hrqrk].[yr:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[yr:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='aantal vluchten departure per state'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='aantal arrival vluchten per state'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 10:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='aantal interne vluchten'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 10:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:Calculation_511158622590758914:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Aantal externe vluchten'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 10:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 6:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:Calculation_511158622590758914:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='average delay per maand'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15:ok]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[yr:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Average Delay per Airport'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15:ok]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Average Delay per Airline'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15:ok]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' maximized='true' name='Sheet 13'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[:Measure Names]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15:ok]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[none:Calculation_511158622599618566:nk]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[twk:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2:ok]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[usr:Calculation_511158622604697609:ok]</field>
            <field>[federated.0zlq722065vciw16e7xu318hrqrk].[yr:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Aantal externe vluchten' width='192'>
      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
      jBwvAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Average Delay per Airline' width='192'>
      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
      odnIAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Average Delay per Airport' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAALuElEQVR4nO3dSXAcZxkG4Le7JY1GGmm0WsvIkizbkuMljkOcWLEd4xRFFhIqS1EcgCwV
      LlAcOHCggGILxQm4cOAABWSpEKhAUWVIZaVwEpwQvMWW7EiKZFmyZa0jjaTROtM/B8UtzXTL
      ntHSM5rvfU7TX36rv1jzuvvvmf5bU0opEAmlp7oBolRiAEi0rFQ3QLTervV2YE4vgT9PR1Fx
      ccx/0zgHoEz3/okTmI9EUFZcit7eTuQXFQOaF9pciKdAlOkUZqfGMRNZ2Kqp34JwaBS6sfDW
      5xGAxAmNh+Av9ANYRQCUUjBNE4ZhrGlzRG7iKRCJxgCQaAwAicYAkGgJfRCmIjNobWlBNMsH
      c3YaO/btQ6623q0Rrb+EAmAqHb7CQoyMTSNQ7sdcRCHHMGGaJngVlTayhAKgaYCpsnDrrTsx
      OBiEP0eDUgtnT7wMShvZqj4HaO8dxvOvn7dqn9/fgCO31a9Vb0TrblVfhpucnkPLpUFre9/2
      ylU3ROQmXgUi0db869Cn26/hJ388bm0/cd+tePzIzrXeDdGa4BGARHPlhpiJqVl094es7cqS
      fJQX5buxa6IbciUA7b1B/PS5xdOiJ+/fi8fuucWNXRPdEE+BSDQGgERjAEg0BoBES9myKCfb
      +vDsc+9Y2089sBePHubEmNzFIwCJxgCQaAwAicYAkGgMAInGAJBoDACJxgCQaAkuizKLtrY2
      mBEd87le7G7ayuRQRkjwk2AFj68UJQU56OzoxNR8A/J0E8qMvZ/eNBeWSomtKZhm1D4uah8X
      iUSS/z8gWoXEjgBKYW5mEqa/AqXVtSjIXlgWRdNjV8fSdR26rsfVNOi6YR9n2MdlZfGBNeSu
      hN5xerYXTU1NAIDioqJ1bYjITTyVJ9EYABKNASDRGAASjQEg0RgAEo0BINEYABItrT56/bhn
      GC+8fs7afuCubSj1e/HiG4vPIHjwwDbsaajA5YHFpRarSn0o8+e52itlhrQKwMTUbMzzBvbv
      qEZOthFTu/OWAC5eHsLPX3zPqj3zhX344sEmV3ulzMBTIBKNASDRGAASjQEg0RgAEo0BINEY
      ABKNASDREgqAUgpXLndjLjKPq339690TkWsS+yQ4OoccrwetLW2oKslDaE7BZ6z9qhC2mrL/
      PGWaiDrUuKIErURCATAj02jr6EGgshTXhkLYUaNB19Z+VQhbTbP/PE3XYTjUuKIErURC7xoj
      twiHD94VU1NqmcFEGwgnwSQaA0CiMQAkGgNAojEAJBoDQKJlzMXz1u4hvPTm4r3DDzVvR/Pu
      zSnsiDaCjAnAeDj2fuLmXTVovTSIl95qsWoP3d2I5l01qWiP0lTGBMBJKC4Ud+/mm59icQ5A
      ojEAJBoDQKJl9BzASUvXIP709uLE+OGDjTiwk3MDqcQFIBSeiZkYH9yzGT0DIfynpdeq3dFU
      je01Jaloj1wmLgBOegZCeHnJUaHIl4v+4AR+8fL7Vu0bj9yB++/clor2aB0xAEkYm5xB7+C4
      tR0oK0BJoTeFHdFqMQBJONc5gF/+efGo8M1H9uO+O7emsCNaLV4FItF4BFil42e78au/fGBt
      f+vR/Sgryscr/75g1R67Zwd0TcMrxy9atceP3IIiXy7+e/GqVTuwM4AtVcXuNE4AEgyAUgpj
      YyEU5nvQ2d2HrY1beei4gbHJ2CtNR/fVQ9e1mNq9t9djdGI6ZvJdUZzPALgssSOAiiA4FkJ0
      IoKoJxe6UjDN9FoWxXEftl6SqNn6cx4XNTWHcfYa4FSDrTYSCqNvJGzVqkvz4c/32MbS2kgs
      AKaJwf4+5NXXY6a3B5OBAHxGei2L4rgPWy9J1Gz9OY+L72X5fdj/ruLpuo4zHQP49d8+tGrf
      /tIBHN1XbxtLayOhAGhZHjQ3NwMAqqqqAHBZFMoMtn+Gjh07loo+iFLCcS577NgxDA8Pu90L
      ketsp0CNjY0AgJGREZSVlbneENl1Xg3iw4/7rO3mXTWoryxKYUeZwxaApqYmKKWgaZrTeEqB
      rr7RmMulVaU+RKNmTCju3lWDOoYiaY6T4MErl3D8g9M4cOgIaqvK3e6JEtAZF4pAWQEDsAKO
      AZgIBRGo3YaC/Fy3+6FVeO3DT/Cbv5+0tr/z5WYc3luXwo7Sn+MkODQdxvn3TyGvsMDtfohc
      ZTsChMeGEJ7WsG33dn7dIQN0XAniZNviXOHg7s2orfCnsKP0YgtAflE5qsu60XVpDvYP62mj
      +eRqMGausLm8ELPzEZxsu2bVJIfCFgBlmsjJzcPEbJBfFc1QHVdiQ1G7qZABuG5mMoQTH5yD
      R/dgBkB+Cpoi97X3juBU++JR4dCezcjzZKNvZNKq1Vb4M+6LebYAeAuL8dADn8OF7itQEzNA
      Aa8ESdBxZSTmqFBX4UdwfBq//cdpq/bdrxzC8FgYv/vnGav2va8eQn8wjN+/ulj7/tcOo6G6
      GNeWhKeu0o/CvPQLj+NZjq+4HHf4s3D+7AD23s7LaJS898734A+vnrW2f/DEYfi8Hpz9ZPEx
      u0f21qG6LLVXGh0DMDrYh+6BIQQC9S63Q5ns457hmKPM9pqS9AzAxQsXcLWnH957K7EJMidH
      5I6hsTD6g4s3ANVX+lHg4qmSYwDy8hSmZ/JQV1PhWiMk07vnevDcax9Z2z988h58pqnatf07
      Xgat3bITU2oQnP5SKvz1+AU8//o5a/tHTx1BV98oXnhjsfbjpz+L0OQM3jzZZdWefvA2FOZ5
      MDC6eETZUlWEqZl5W83nzQGwzGXQN958Bx7dg6m79vEyKKWtwbFwzEID4ek5nGq7hpfeWnxS
      0LPPHMWF7qGY9WB/9vWj2NOwcHZzg8ug/XzzU8Z6+9Ql/Ov0Jeev+/iKy7Gjpgqzn24rcx5t
      7V0YDw7io3OtiPB+YNrgrh89HAPQcvp/ePfECbS2dgAAND0b/gIvxqfmsK2yEKE5LotyvRbf
      y6r3a6tFExoXja52v4n8Lu29RE0TSsX34tCzU3/L9pxYL/Hvv+V6ia8t3a/zFz6j88gqKEZ5
      sQ8AoCKzGBoehicnG5fH5lDi0aDrXBYluWVRVlozEhpnGKvdbyK/S3svhq5D0+J7cejZqb9l
      e06sl/j333K9xNeW7tcxAGWbytDV3olN1QtLoGhZHuzZswflmyqws3EreLMkZQpbAJQyMTwy
      hvrazXyjU8azXQUa6+vGpYFRhMenYTj9CaIMYgtAcaABDwcaEJmddRpPlFGWvecly5N+X10l
      Wmu87ZdEYwBINAaARGMASDQGgERjAEg0BoBEYwBINAaARGMASDQGgERjAEg0BoBEYwBINAaA
      REsqAKG+HnzU1onozYcSbQhJBUDL9SI6NoSpeS6Lcr3GZVE29rIoST0FKd/nQ2l1LQqyNSjF
      ZVGSWxbF/ncVb6Gm4moG4ocu/LzYcVwWZWXLoiQVACPHi7rN3mT+CFFa4ySYRGMASDQGgERj
      AEg0BoBEYwBINAaARGMASDQGgERjAEg0BoBEYwBINAaARGMASDQGgERjAEg0BoBEYwBINAaA
      REsqAEP9V3Dm1BlMmzcfS7QRaEopdfNhC672XoahovBWboHPMDH76cO0DcNANBpN+LWu69ay
      FCt9rWkaNE3bEK8BQCmV9Gtd16GU2nCvV/q7TfZ9tBavkwqAMufR1x9EoLoCSi2sDWQYxs3/
      IFGaSioASzEAlAk4CSbRGAASjQEg0RgAEo0BINEYABKNASDRGAASjQEg0RgAEo0BINEYABKN
      ASDRGAASjQEg0RgAEo0BINEYABItqQBE56bR3t6J6Hp1Q+SyrGQGj/b3IerJhf7p/cCmaWKF
      txQTpYWEAzAZCmI+Ow8zvT2YDATgMxYOHrwpnjYyrgpBonESTKIxACQaA0CiMQAkGgNAojEA
      JBoDQKIxACQaA0CiMQAkGgNAojEAJBoDQKIxACQaA0CiJXVHWLzrz3cl2qhWFQBd12EYhvWA
      56U3yaxVbemDmNOttvRhz+lQu/6A7nSsRaNR6LqedrX/AyaQOkN5ZdUEAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Sheet 13' width='164'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 3 (2)' width='192'>
      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
      iOnCh6pheQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Vluchten per airline' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='aantal arrival vluchten per state' width='192'>
      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
      cK6RSAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='aantal interne vluchten' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='aantal vluchten departure per state' width='192'>
      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
      cK6RSAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='arrivals per luchthaven' width='192'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='average delay per maand' width='192'>
      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
      UAB4vxcXL7VEaiyERJ2g9rrjI0NwedxwezloPymHpvboRM4EF8O5XEtITEyiYjgSE6galCga
      Hb1E0SgARNEoAETRKABE0SgARNEoAETRKABE0SgARNEoAETRKABE0SgARNEEBcC14EBf/xCi
      dE9kQiJOUDm0Pi4OroV5+BmDmueoHJrInqAAuJaWoNGowPEq6DQaqgYlskfl0ETR6OglikYB
      IIpGASCKRgEgikYBIIpGASCKRgEgikYBIIpGASCKRgEgikYBIIomKACc34tJ6zSoGprECkHV
      oF6vD+6FOXhMRujAf1oQR4hcCQrA4tw0Fv0MWhWgwu07flM1KJEzQeXQPMfB5+eg1+sBUDk0
      kT/aD0AUjY5eomgUAKJoFACiaBQAomgUAKJoFACiaBQAomgUAKJoFACiaBQAomgUAKJoggKw
      vDSP0VuTkRoLIVEnqBw6ISkVuvklMMbAcdQencifoAAszc/BPjMLg8lM7dFJTKByaKJodPQS
      RaMAEEWjABBFowAQRaMAEEX7f1BgWYYNHIHbAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='departures per luchthaven' width='192'>
      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
      YII=
    </thumbnail>
    <thumbnail height='192' name='vluchten per maand' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
