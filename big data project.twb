<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10500.17.1226.1925                               -->
<workbook original-version='10.5' source-build='10.5.0 (10500.17.1226.1925)' source-platform='win' version='10.5' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='10.5'>
      <aliases enabled='yes' />
      <column caption='AirportSelected' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;ABE&quot;'>
        <calculation class='tableau' formula='&quot;ABE&quot;' />
        <members>
          <member value='&quot;ABE&quot;' />
          <member value='&quot;ABI&quot;' />
          <member value='&quot;ABQ&quot;' />
          <member value='&quot;ABR&quot;' />
          <member value='&quot;ABY&quot;' />
          <member value='&quot;ACK&quot;' />
          <member value='&quot;ACT&quot;' />
          <member value='&quot;ACV&quot;' />
          <member value='&quot;ACY&quot;' />
          <member value='&quot;ADK&quot;' />
          <member value='&quot;ADQ&quot;' />
          <member value='&quot;AEX&quot;' />
          <member value='&quot;AGS&quot;' />
          <member value='&quot;AKN&quot;' />
          <member value='&quot;ALB&quot;' />
          <member value='&quot;ALO&quot;' />
          <member value='&quot;AMA&quot;' />
          <member value='&quot;ANC&quot;' />
          <member value='&quot;APN&quot;' />
          <member value='&quot;ART&quot;' />
          <member value='&quot;ASE&quot;' />
          <member value='&quot;ATL&quot;' />
          <member value='&quot;ATW&quot;' />
          <member value='&quot;AUS&quot;' />
          <member value='&quot;AVL&quot;' />
          <member value='&quot;AVP&quot;' />
          <member value='&quot;AZO&quot;' />
          <member value='&quot;BDL&quot;' />
          <member value='&quot;BET&quot;' />
          <member value='&quot;BFL&quot;' />
          <member value='&quot;BGM&quot;' />
          <member value='&quot;BGR&quot;' />
          <member value='&quot;BHM&quot;' />
          <member value='&quot;BIL&quot;' />
          <member value='&quot;BIS&quot;' />
          <member value='&quot;BJI&quot;' />
          <member value='&quot;BLI&quot;' />
          <member value='&quot;BMI&quot;' />
          <member value='&quot;BNA&quot;' />
          <member value='&quot;BOI&quot;' />
          <member value='&quot;BOS&quot;' />
          <member value='&quot;BPT&quot;' />
          <member value='&quot;BQK&quot;' />
          <member value='&quot;BQN&quot;' />
          <member value='&quot;BRD&quot;' />
          <member value='&quot;BRO&quot;' />
          <member value='&quot;BRW&quot;' />
          <member value='&quot;BTM&quot;' />
          <member value='&quot;BTR&quot;' />
          <member value='&quot;BTV&quot;' />
          <member value='&quot;BUF&quot;' />
          <member value='&quot;BUR&quot;' />
          <member value='&quot;BWI&quot;' />
          <member value='&quot;BZN&quot;' />
          <member value='&quot;CAE&quot;' />
          <member value='&quot;CAK&quot;' />
          <member value='&quot;CDC&quot;' />
          <member value='&quot;CDV&quot;' />
          <member value='&quot;CEC&quot;' />
          <member value='&quot;CHA&quot;' />
          <member value='&quot;CHO&quot;' />
          <member value='&quot;CHS&quot;' />
          <member value='&quot;CIC&quot;' />
          <member value='&quot;CID&quot;' />
          <member value='&quot;CLE&quot;' />
          <member value='&quot;CLL&quot;' />
          <member value='&quot;CLT&quot;' />
          <member value='&quot;CMH&quot;' />
          <member value='&quot;CMI&quot;' />
          <member value='&quot;CMX&quot;' />
          <member value='&quot;COD&quot;' />
          <member value='&quot;COS&quot;' />
          <member value='&quot;COU&quot;' />
          <member value='&quot;CPR&quot;' />
          <member value='&quot;CRP&quot;' />
          <member value='&quot;CRW&quot;' />
          <member value='&quot;CSG&quot;' />
          <member value='&quot;CVG&quot;' />
          <member value='&quot;CWA&quot;' />
          <member value='&quot;CYS&quot;' />
          <member value='&quot;DAB&quot;' />
          <member value='&quot;DAL&quot;' />
          <member value='&quot;DAY&quot;' />
          <member value='&quot;DBQ&quot;' />
          <member value='&quot;DCA&quot;' />
          <member value='&quot;DEN&quot;' />
          <member value='&quot;DFW&quot;' />
          <member value='&quot;DHN&quot;' />
          <member value='&quot;DLG&quot;' />
          <member value='&quot;DLH&quot;' />
          <member value='&quot;DRO&quot;' />
          <member value='&quot;DRT&quot;' />
          <member value='&quot;DSM&quot;' />
          <member value='&quot;DTW&quot;' />
          <member value='&quot;EAU&quot;' />
          <member value='&quot;EGE&quot;' />
          <member value='&quot;EKO&quot;' />
          <member value='&quot;ELM&quot;' />
          <member value='&quot;ELP&quot;' />
          <member value='&quot;ESC&quot;' />
          <member value='&quot;EUG&quot;' />
          <member value='&quot;EVV&quot;' />
          <member value='&quot;EWN&quot;' />
          <member value='&quot;EWR&quot;' />
          <member value='&quot;EYW&quot;' />
          <member value='&quot;FAI&quot;' />
          <member value='&quot;FAR&quot;' />
          <member value='&quot;FAT&quot;' />
          <member value='&quot;FAY&quot;' />
          <member value='&quot;FLG&quot;' />
          <member value='&quot;FLL&quot;' />
          <member value='&quot;FLO&quot;' />
          <member value='&quot;FNT&quot;' />
          <member value='&quot;FSD&quot;' />
          <member value='&quot;FSM&quot;' />
          <member value='&quot;FWA&quot;' />
          <member value='&quot;GCC&quot;' />
          <member value='&quot;GCK&quot;' />
          <member value='&quot;GEG&quot;' />
          <member value='&quot;GFK&quot;' />
          <member value='&quot;GGG&quot;' />
          <member value='&quot;GJT&quot;' />
          <member value='&quot;GNV&quot;' />
          <member value='&quot;GPT&quot;' />
          <member value='&quot;GRB&quot;' />
          <member value='&quot;GRI&quot;' />
          <member value='&quot;GRK&quot;' />
          <member value='&quot;GRR&quot;' />
          <member value='&quot;GSO&quot;' />
          <member value='&quot;GSP&quot;' />
          <member value='&quot;GST&quot;' />
          <member value='&quot;GTF&quot;' />
          <member value='&quot;GTR&quot;' />
          <member value='&quot;GUC&quot;' />
          <member value='&quot;GUM&quot;' />
          <member value='&quot;HDN&quot;' />
          <member value='&quot;HIB&quot;' />
          <member value='&quot;HLN&quot;' />
          <member value='&quot;HNL&quot;' />
          <member value='&quot;HOB&quot;' />
          <member value='&quot;HOU&quot;' />
          <member value='&quot;HPN&quot;' />
          <member value='&quot;HRL&quot;' />
          <member value='&quot;HSV&quot;' />
          <member value='&quot;IAD&quot;' />
          <member value='&quot;IAH&quot;' />
          <member value='&quot;ICT&quot;' />
          <member value='&quot;IDA&quot;' />
          <member value='&quot;ILM&quot;' />
          <member value='&quot;IMT&quot;' />
          <member value='&quot;IND&quot;' />
          <member value='&quot;INL&quot;' />
          <member value='&quot;IPL&quot;' />
          <member value='&quot;ISN&quot;' />
          <member value='&quot;ISP&quot;' />
          <member value='&quot;ITO&quot;' />
          <member value='&quot;IYK&quot;' />
          <member value='&quot;JAC&quot;' />
          <member value='&quot;JAN&quot;' />
          <member value='&quot;JAX&quot;' />
          <member value='&quot;JFK&quot;' />
          <member value='&quot;JLN&quot;' />
          <member value='&quot;JNU&quot;' />
          <member value='&quot;KOA&quot;' />
          <member value='&quot;KTN&quot;' />
          <member value='&quot;LAN&quot;' />
          <member value='&quot;LAR&quot;' />
          <member value='&quot;LAS&quot;' />
          <member value='&quot;LAW&quot;' />
          <member value='&quot;LAX&quot;' />
          <member value='&quot;LBB&quot;' />
          <member value='&quot;LCH&quot;' />
          <member value='&quot;LEX&quot;' />
          <member value='&quot;LFT&quot;' />
          <member value='&quot;LGA&quot;' />
          <member value='&quot;LGB&quot;' />
          <member value='&quot;LIH&quot;' />
          <member value='&quot;LIT&quot;' />
          <member value='&quot;LMT&quot;' />
          <member value='&quot;LNK&quot;' />
          <member value='&quot;LRD&quot;' />
          <member value='&quot;LSE&quot;' />
          <member value='&quot;LWB&quot;' />
          <member value='&quot;LWS&quot;' />
          <member value='&quot;LYH&quot;' />
          <member value='&quot;MAF&quot;' />
          <member value='&quot;MBS&quot;' />
          <member value='&quot;MCI&quot;' />
          <member value='&quot;MCO&quot;' />
          <member value='&quot;MDT&quot;' />
          <member value='&quot;MDW&quot;' />
          <member value='&quot;MEI&quot;' />
          <member value='&quot;MEM&quot;' />
          <member value='&quot;MFE&quot;' />
          <member value='&quot;MFR&quot;' />
          <member value='&quot;MGM&quot;' />
          <member value='&quot;MHK&quot;' />
          <member value='&quot;MHT&quot;' />
          <member value='&quot;MIA&quot;' />
          <member value='&quot;MKE&quot;' />
          <member value='&quot;MKG&quot;' />
          <member value='&quot;MLB&quot;' />
          <member value='&quot;MLI&quot;' />
          <member value='&quot;MLU&quot;' />
          <member value='&quot;MMH&quot;' />
          <member value='&quot;MOB&quot;' />
          <member value='&quot;MOD&quot;' />
          <member value='&quot;MOT&quot;' />
          <member value='&quot;MRY&quot;' />
          <member value='&quot;MSN&quot;' />
          <member value='&quot;MSO&quot;' />
          <member value='&quot;MSP&quot;' />
          <member value='&quot;MSY&quot;' />
          <member value='&quot;MTJ&quot;' />
          <member value='&quot;MVY&quot;' />
          <member value='&quot;MYR&quot;' />
          <member value='&quot;OAJ&quot;' />
          <member value='&quot;OAK&quot;' />
          <member value='&quot;OGG&quot;' />
          <member value='&quot;OKC&quot;' />
          <member value='&quot;OMA&quot;' />
          <member value='&quot;OME&quot;' />
          <member value='&quot;ONT&quot;' />
          <member value='&quot;ORD&quot;' />
          <member value='&quot;ORF&quot;' />
          <member value='&quot;OTH&quot;' />
          <member value='&quot;OTZ&quot;' />
          <member value='&quot;PAH&quot;' />
          <member value='&quot;PBI&quot;' />
          <member value='&quot;PDX&quot;' />
          <member value='&quot;PHF&quot;' />
          <member value='&quot;PHL&quot;' />
          <member value='&quot;PHX&quot;' />
          <member value='&quot;PIA&quot;' />
          <member value='&quot;PIE&quot;' />
          <member value='&quot;PIH&quot;' />
          <member value='&quot;PIT&quot;' />
          <member value='&quot;PLN&quot;' />
          <member value='&quot;PNS&quot;' />
          <member value='&quot;PSC&quot;' />
          <member value='&quot;PSE&quot;' />
          <member value='&quot;PSG&quot;' />
          <member value='&quot;PSP&quot;' />
          <member value='&quot;PVD&quot;' />
          <member value='&quot;PWM&quot;' />
          <member value='&quot;RAP&quot;' />
          <member value='&quot;RDD&quot;' />
          <member value='&quot;RDM&quot;' />
          <member value='&quot;RDU&quot;' />
          <member value='&quot;RFD&quot;' />
          <member value='&quot;RIC&quot;' />
          <member value='&quot;RKS&quot;' />
          <member value='&quot;RNO&quot;' />
          <member value='&quot;ROA&quot;' />
          <member value='&quot;ROC&quot;' />
          <member value='&quot;ROW&quot;' />
          <member value='&quot;RST&quot;' />
          <member value='&quot;RSW&quot;' />
          <member value='&quot;SAF&quot;' />
          <member value='&quot;SAN&quot;' />
          <member value='&quot;SAT&quot;' />
          <member value='&quot;SAV&quot;' />
          <member value='&quot;SBA&quot;' />
          <member value='&quot;SBN&quot;' />
          <member value='&quot;SBP&quot;' />
          <member value='&quot;SCC&quot;' />
          <member value='&quot;SDF&quot;' />
          <member value='&quot;SEA&quot;' />
          <member value='&quot;SFO&quot;' />
          <member value='&quot;SGF&quot;' />
          <member value='&quot;SGU&quot;' />
          <member value='&quot;SHD&quot;' />
          <member value='&quot;SHV&quot;' />
          <member value='&quot;SIT&quot;' />
          <member value='&quot;SJC&quot;' />
          <member value='&quot;SJT&quot;' />
          <member value='&quot;SJU&quot;' />
          <member value='&quot;SLC&quot;' />
          <member value='&quot;SMF&quot;' />
          <member value='&quot;SMX&quot;' />
          <member value='&quot;SNA&quot;' />
          <member value='&quot;SPI&quot;' />
          <member value='&quot;SPS&quot;' />
          <member value='&quot;SRQ&quot;' />
          <member value='&quot;STL&quot;' />
          <member value='&quot;STT&quot;' />
          <member value='&quot;STX&quot;' />
          <member value='&quot;SUN&quot;' />
          <member value='&quot;SUX&quot;' />
          <member value='&quot;SWF&quot;' />
          <member value='&quot;SYR&quot;' />
          <member value='&quot;TEX&quot;' />
          <member value='&quot;TLH&quot;' />
          <member value='&quot;TOL&quot;' />
          <member value='&quot;TPA&quot;' />
          <member value='&quot;TRI&quot;' />
          <member value='&quot;TTN&quot;' />
          <member value='&quot;TUL&quot;' />
          <member value='&quot;TUP&quot;' />
          <member value='&quot;TUS&quot;' />
          <member value='&quot;TVC&quot;' />
          <member value='&quot;TWF&quot;' />
          <member value='&quot;TXK&quot;' />
          <member value='&quot;TYR&quot;' />
          <member value='&quot;TYS&quot;' />
          <member value='&quot;VLD&quot;' />
          <member value='&quot;VPS&quot;' />
          <member value='&quot;WRG&quot;' />
          <member value='&quot;WYS&quot;' />
          <member value='&quot;XNA&quot;' />
          <member value='&quot;YAK&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='cleaned' inline='true' name='federated.1p98wca0tqsjye13ncske0z3ll5c' version='10.5'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='cleaned' name='textscan.0503mvv0q8c18j15bmknj1ctn5md'>
            <connection class='textscan' directory='C:/Users/Mathias/AnacondaProjects/big-data-project' filename='cleaned.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.0503mvv0q8c18j15bmknj1ctn5md' name='cleaned.csv' table='[cleaned#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='nl_BE'>
            <column datatype='string' name=',date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_' ordinal='0' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[cleaned.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;nl_NL&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;€&quot;</attribute>
              <attribute datatype='string' name='debit-close-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='debit-open-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='decimal-char'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;nl_BE&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='thousands-char'>&quot;.&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_</remote-name>
            <remote-type>129</remote-type>
            <local-name>[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]</local-name>
            <parent-name>[cleaned.csv]</parent-name>
            <remote-alias>,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LNL_RNL' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Actual_Dep' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 10]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='20' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -5 ) )' />
      </column>
      <column caption='Departure_State' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 11]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='11' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 6 ) )' />
      </column>
      <column aggregation='Avg' caption='Dep_Lat' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 12]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative' user:SplitFieldIndex='12' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 7 ) ))' />
      </column>
      <column aggregation='Avg' caption='Dep_Lon' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 13]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative' user:SplitFieldIndex='13' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 8 ) ))' />
      </column>
      <column caption='Arrival_Airport' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14]' role='dimension' semantic-role='[Airport].[Name]' type='nominal' user:SplitFieldIndex='14' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 9 ) )' />
      </column>
      <column caption='Arrival_State' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 15]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='15' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 10 ) )' />
      </column>
      <column caption='Dep_Delay' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 16]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='21' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -4 ) )' />
      </column>
      <column caption='Arrival_sched' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 17]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='22' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -3 ) )' />
      </column>
      <column aggregation='Count' caption='Arrival_Actual' datatype='datetime' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 18]' role='dimension' semantic-role='' type='ordinal' user:SplitFieldIndex='23' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='DATEPARSE ( &quot;HH:mm&quot;, TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -2 ) ) ) ' />
      </column>
      <column caption='Arrival_Delay' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 19]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='24' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -1 ) )' />
      </column>
      <column caption='Id' datatype='integer' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' role='dimension' semantic-role='' type='ordinal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='INT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 1 ) ))' />
      </column>
      <column caption='Date' datatype='date' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2]' role='dimension' semantic-role='' type='ordinal' user:SplitFieldIndex='2' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='DATE(DATEPARSE ( &quot;yyyy-MM-dd&quot;, TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 2 ) ) )) ' />
      </column>
      <column caption='Airline' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 3]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='3' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 3 ) )' />
      </column>
      <column caption='Airline_Code' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 4]' role='dimension' semantic-role='[State].[Name]' type='nominal' user:SplitFieldIndex='4' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 4 ) )' />
      </column>
      <column caption='Departure_Airport' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5]' role='dimension' semantic-role='[Airport].[Name]' type='nominal' user:SplitFieldIndex='5' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 5 ) )' />
      </column>
      <column aggregation='Avg' caption='Arr_Lat' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 7]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative' user:SplitFieldIndex='17' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -8 ) ))' />
      </column>
      <column aggregation='Avg' caption='Arr_Lon' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 8]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative' user:SplitFieldIndex='18' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -7 ) ))' />
      </column>
      <column aggregation='Count' caption='Departure_sched' datatype='datetime' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 9]' role='dimension' semantic-role='[State].[Name]' type='ordinal' user:SplitFieldIndex='19' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
        <calculation class='tableau' formula='DATEPARSE ( &quot;HH:mm&quot;, TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -6 ) ) ) ' />
      </column>
      <column datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column caption='Select by Origin-Destination' datatype='string' name='[Calculation_621215335981547521]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <layout dim-ordering='alphabetic' dim-percentage='0.649318' measure-ordering='alphabetic' measure-percentage='0.22057' parameter-percentage='0.130112' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Bélgica&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Airport Greatest Arrival'>
      <table>
        <view>
          <datasources>
            <datasource caption='cleaned' name='federated.1p98wca0tqsjye13ncske0z3ll5c' />
          </datasources>
          <datasource-dependencies datasource='federated.1p98wca0tqsjye13ncske0z3ll5c'>
            <column caption='Arrival_Airport' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14]' role='dimension' semantic-role='[Airport].[Name]' type='nominal' user:SplitFieldIndex='14' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 9 ) )' />
            </column>
            <column caption='Id' datatype='integer' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' role='dimension' semantic-role='' type='ordinal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='INT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 1 ) ))' />
            </column>
            <column datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' derivation='Count' name='[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <sort class='computed' column='[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14:nk]' direction='DESC' using='[federated.1p98wca0tqsjye13ncske0z3ll5c].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.1p98wca0tqsjye13ncske0z3ll5c].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]</rows>
        <cols>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Airport Greatest Departure'>
      <table>
        <view>
          <datasources>
            <datasource caption='cleaned' name='federated.1p98wca0tqsjye13ncske0z3ll5c' />
          </datasources>
          <datasource-dependencies datasource='federated.1p98wca0tqsjye13ncske0z3ll5c'>
            <column caption='Id' datatype='integer' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' role='dimension' semantic-role='' type='ordinal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='INT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 1 ) ))' />
            </column>
            <column caption='Departure_Airport' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5]' role='dimension' semantic-role='[Airport].[Name]' type='nominal' user:SplitFieldIndex='5' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 5 ) )' />
            </column>
            <column datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' derivation='Count' name='[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <sort class='computed' column='[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:nk]' direction='DESC' using='[federated.1p98wca0tqsjye13ncske0z3ll5c].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.1p98wca0tqsjye13ncske0z3ll5c].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]</rows>
        <cols>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Amount Per Airport Arrival'>
      <table>
        <view>
          <datasources>
            <datasource caption='cleaned' name='federated.1p98wca0tqsjye13ncske0z3ll5c' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1p98wca0tqsjye13ncske0z3ll5c'>
            <column caption='Arrival_Airport' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14]' role='dimension' semantic-role='[Airport].[Name]' type='nominal' user:SplitFieldIndex='14' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 9 ) )' />
            </column>
            <column caption='Id' datatype='integer' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' role='dimension' semantic-role='' type='ordinal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='INT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 1 ) ))' />
            </column>
            <column aggregation='Avg' caption='Arr_Lat' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 7]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative' user:SplitFieldIndex='17' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -8 ) ))' />
            </column>
            <column aggregation='Avg' caption='Arr_Lon' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 8]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative' user:SplitFieldIndex='18' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, -7 ) ))' />
            </column>
            <column datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' derivation='Count' name='[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14:nk]' pivot='key' type='nominal' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 7]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 7:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 8]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 8:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 8:qk]' field-type='quantitative' max='845178.78885730356' min='-21647583.454487532' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 7:qk]' field-type='quantitative' max='13134271.532548551' min='-377864.02755603381' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1p98wca0tqsjye13ncske0z3ll5c].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' palette='orange_gold_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1p98wca0tqsjye13ncske0z3ll5c].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' />
              <text column='[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14:nk]' />
              <size column='[federated.1p98wca0tqsjye13ncske0z3ll5c].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 7:qk]</rows>
        <cols>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 8:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Amount per Airport Departure'>
      <table>
        <view>
          <datasources>
            <datasource caption='cleaned' name='federated.1p98wca0tqsjye13ncske0z3ll5c' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1p98wca0tqsjye13ncske0z3ll5c'>
            <column aggregation='Avg' caption='Dep_Lat' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 12]' role='dimension' semantic-role='[Geographical].[Latitude]' type='quantitative' user:SplitFieldIndex='12' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 7 ) ))' />
            </column>
            <column aggregation='Avg' caption='Dep_Lon' datatype='real' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 13]' role='dimension' semantic-role='[Geographical].[Longitude]' type='quantitative' user:SplitFieldIndex='13' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='FLOAT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 8 ) ))' />
            </column>
            <column caption='Id' datatype='integer' datatype-customized='true' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' role='dimension' semantic-role='' type='ordinal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='INT(TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 1 ) ))' />
            </column>
            <column caption='Departure_Airport' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5]' role='dimension' semantic-role='[Airport].[Name]' type='nominal' user:SplitFieldIndex='5' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 5 ) )' />
            </column>
            <column datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1]' derivation='Count' name='[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 12]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 12:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 13]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 13:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 13:qk]' field-type='quantitative' max='-120526.17049139738' min='-18982058.075395171' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 12:qk]' field-type='quantitative' max='9785548.6804957818' min='-1548842.0031259805' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1p98wca0tqsjye13ncske0z3ll5c].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' palette='orange_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1p98wca0tqsjye13ncske0z3ll5c].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' />
              <size column='[federated.1p98wca0tqsjye13ncske0z3ll5c].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' />
              <text column='[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 12:qk]</rows>
        <cols>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 13:qk]</cols>
      </table>
    </worksheet>
    <worksheet name='Atlanta Arrivals From Other Airports'>
      <table>
        <view>
          <datasources>
            <datasource caption='cleaned' name='federated.1p98wca0tqsjye13ncske0z3ll5c' />
          </datasources>
          <datasource-dependencies datasource='federated.1p98wca0tqsjye13ncske0z3ll5c'>
            <column caption='Arrival_Airport' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14]' role='dimension' semantic-role='[Airport].[Name]' type='nominal' user:SplitFieldIndex='14' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 9 ) )' />
            </column>
            <column caption='Departure_Airport' datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5]' role='dimension' semantic-role='[Airport].[Name]' type='nominal' user:SplitFieldIndex='5' user:SplitFieldOrigin='[federated.1p98wca0tqsjye13ncske0z3ll5c].[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_], &quot;,&quot;, 5 ) )' />
            </column>
            <column datatype='string' name='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5]' derivation='Count' name='[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:qk]' pivot='key' type='quantitative' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14:nk]' pivot='key' type='nominal' />
            <column-instance column='[,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5]' derivation='None' name='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:nk]' pivot='key' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14:nk]'>
            <groupfilter function='member' level='[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14:nk]' member='&quot;ATL&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <sort class='computed' column='[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:nk]' direction='DESC' using='[federated.1p98wca0tqsjye13ncske0z3ll5c].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:qk]' />
          <slices>
            <column>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.1p98wca0tqsjye13ncske0z3ll5c].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:qk]</rows>
        <cols>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:nk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <windows source-height='30'>
    <window class='worksheet' name='Amount per Airport Departure'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1p98wca0tqsjye13ncske0z3ll5c].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' type='size' />
            <card pane-specification-id='0' param='[federated.1p98wca0tqsjye13ncske0z3ll5c].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 12:qk]</field>
            <field>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 13:qk]</field>
            <field>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:ok]</field>
            <field>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:nk]</field>
            <field>[federated.1p98wca0tqsjye13ncske0z3ll5c].[wk:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 2:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Amount Per Airport Arrival'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1p98wca0tqsjye13ncske0z3ll5c].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' type='size' />
            <card pane-specification-id='0' param='[federated.1p98wca0tqsjye13ncske0z3ll5c].[cnt:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 12:qk]</field>
            <field>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 13:qk]</field>
            <field>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14:nk]</field>
            <field>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:ok]</field>
            <field>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 7:qk]</field>
            <field>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 8:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
    </window>
    <window class='worksheet' name='Airport Greatest Arrival'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14:nk]</field>
            <field>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Airport Greatest Departure'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14:nk]</field>
            <field>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 1:ok]</field>
            <field>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' maximized='true' name='Atlanta Arrivals From Other Airports'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 14:nk]</field>
            <field>[federated.1p98wca0tqsjye13ncske0z3ll5c].[none:,date,airline,airline_code,departure_airport,departure_state,departure_lat,departure_lon,arrival_airport,arrival_state,arrival_ - Split 5:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Airport Greatest Arrival' width='192'>
      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
      nEAT0QAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Airport Greatest Departure' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Amount Per Airport Arrival' width='192'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Amount per Airport Departure' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Atlanta Arrivals From Other Airports' width='192'>
      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
      AAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
